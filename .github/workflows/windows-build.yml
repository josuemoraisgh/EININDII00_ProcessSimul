name: Windows EXE (PyInstaller)

on:
  push:
    branches: [ main, master ]
    tags: [ 'v*' ]
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build-win:
    runs-on: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          cache: 'pip'
          cache-dependency-path: requirements.txt

      - name: Install dependencies
        shell: pwsh
        run: |
          python -m pip install --upgrade pip
          if (Test-Path requirements.txt) { pip install -r requirements.txt }
          pip install pyinstaller pyinstaller-hooks-contrib

      - name: Compute version and names
        shell: pwsh
        run: |
          if ("${{ github.ref }}".StartsWith("refs/tags/")) { $ver = "${{ github.ref_name }}" }
          else { $ver = "dev-${{ github.run_number }}" }
          "APP_VER=$ver"   | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          $repo = "${{ github.repository }}".Split("/")[1]
          "APP_NAME=$repo" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          Write-Host "APP_VER=$ver | APP_NAME=$repo"

      - name: Locate entry and db folder
        shell: pwsh
        run: |
          if (Test-Path "main.py") { $entry="main.py" } else { throw "main.py não encontrado na raiz." }
          "ENTRY=$entry" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          if (-not (Test-Path "db")) { throw "Pasta 'db' não encontrada na raiz do projeto." }
          $hasFiles = (Get-ChildItem -Recurse -File db | Measure-Object).Count -gt 0
          if (-not $hasFiles) { throw "A pasta 'db' está vazia. Adicione o(s) arquivo(s) do banco." }
          Write-Host "ENTRY=$entry | db/ OK"

      - name: Build EXE (PyInstaller)
        shell: pwsh
        run: |
          if (Test-Path build) { Remove-Item build -Recurse -Force }
          if (Test-Path dist)  { Remove-Item dist  -Recurse -Force }

          $name = "${{ env.APP_NAME }}-${{ env.APP_VER }}"
          $args = @(
            "--noconfirm",
            "--clean",
            "--onefile",
            "--windowed",
            "-n", $name
          )

          if (Test-Path "assets/app.ico") {
            $args += @("-i", "assets/app.ico")
          }

          # IMPORTANTE: "db;db" precisa estar entre aspas por causa do ';' no Windows
          $args += @("--add-data", "db;db", "${{ env.ENTRY }}")

          Write-Host "Python exe:" (Get-Command python).Path
          python -c "import sys,PyInstaller; print('PyInstaller', PyInstaller.__version__); print(sys.version)"
          Write-Host "Running: python -m PyInstaller $($args -join ' ')"

          # Chamada correta usando array splatting
          python -m PyInstaller @args

          Write-Host "Dist contents:"
          Get-ChildItem dist -Recurse | Format-Table -AutoSize


      - name: Ensure final exe name
        shell: pwsh
        run: |
          $exe = Get-ChildItem -Path dist -Filter "*.exe" -File | Select-Object -First 1
          if (-not $exe) { throw "Nenhum .exe gerado em dist/." }
          $target = Join-Path $exe.Directory.FullName "${{ env.APP_NAME }}-${{ env.APP_VER }}.exe"
          if ($exe.FullName -ne $target) { Move-Item $exe.FullName $target -Force }
          Write-Host "Final EXE: $target"

      - name: Upload artifact (.exe)
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.APP_NAME }}-${{ env.APP_VER }}-win
          path: dist/*.exe
          if-no-files-found: error

      - name: Publish GitHub Release (on tag)
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v2
        with:
          files: dist/*.exe
          generate_release_notes: true