name: Windows EXE (PyInstaller)

on:
  push:
    branches: [ main, master ]
    tags: [ 'v*' ]
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build-win:
    runs-on: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          cache: 'pip'
          cache-dependency-path: requirements.txt

      - name: Install dependencies
        shell: pwsh
        run: |
          python -m pip install --upgrade pip
          if (Test-Path requirements.txt) { pip install -r requirements.txt }
          pip install pyinstaller pyinstaller-hooks-contrib

      - name: Compute version and names
        shell: pwsh
        run: |
          if ("${{ github.ref }}".StartsWith("refs/tags/")) { $ver = "${{ github.ref_name }}" }
          else { $ver = "dev-${{ github.run_number }}" }
          "APP_VER=$ver" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

          # Nome base do app: usa o nome do repositório por padrão
          $repo = "${{ github.repository }}".Split("/")[1]
          $app  = $repo
          "APP_NAME=$app" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

          Write-Host "APP_VER=$ver"
          Write-Host "APP_NAME=$app"

      - name: Locate entry point (main.py) and db folder
        shell: pwsh
        run: |
          if (Test-Path "main.py") { $entry="main.py" }
          else { throw "main.py não encontrado na raiz. Ajuste este passo ou altere o ENTRY." }
          "ENTRY=$entry" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          Write-Host "ENTRY=$entry"

          if (Test-Path "db") {
            # Valida se há ao menos 1 arquivo na pasta db
            $hasFiles = (Get-ChildItem -Recurse -File db | Measure-Object).Count -gt 0
            if (-not $hasFiles) { throw "A pasta 'db' está vazia. Adicione o(s) arquivo(s) do banco." }
            "HAS_DB=1" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
            Write-Host "Pasta 'db' encontrada e com arquivos."
          }
          else {
            throw "Pasta 'db' não encontrada na raiz do projeto. Ela é obrigatória para embutir o banco no EXE."
          }

      - name: Build EXE (PyInstaller API)
        shell: pwsh
        run: |
          if (Test-Path build) { Remove-Item build -Recurse -Force }
          if (Test-Path dist)  { Remove-Item dist  -Recurse -Force }
          New-Item -ItemType Directory -Force -Path build | Out-Null

          $py = @"
import os
import sys
import PyInstaller.__main__ as P

ver   = os.environ.get("APP_VER", "dev")
name0 = os.environ.get("APP_NAME", "app")
name  = f"{name0}-{ver}"
entry = os.environ.get("ENTRY", "main.py")

# Monta opções do PyInstaller
opts = [
    "--noconfirm",
    "--clean",
    "--onefile",
    "--windowed",
    "-n", name,
]

# Ícone opcional (se existir em assets/app.ico)
ico = os.path.join("assets", "app.ico")
if os.path.exists(ico):
    opts += ["-i", ico]

# Embute a pasta db/ inteira dentro do executável (Windows usa SRC;DEST)
if os.path.isdir("db"):
    opts += ["--add-data", "db;db"]

# Se existir espec, respeita primeiro spec encontrado
specs = [f for f in os.listdir(".") if f.lower().endswith(".spec")]
if specs:
    print(">> Building from SPEC:", specs[0])
    P.run([specs[0]])
else:
    print(">> Building from script:", entry)
    opts += [entry]
    print("PyInstaller opts:", opts)
    P.run(opts)
"@

          $py | Set-Content -Path build/run_pyi.py -Encoding UTF8
          python build/run_pyi.py

          Write-Host "Dist contents:"
          Get-ChildItem dist -Recurse | Format-Table -AutoSize

      - name: Rename single exe to stable name (optional)
        shell: pwsh
        run: |
          $exe = Get-ChildItem -Path dist -Filter "*.exe" -File | Select-Object -First 1
          if (-not $exe) { throw "Nenhum .exe gerado em dist/." }
          $target = Join-Path $exe.Directory.FullName "${{ env.APP_NAME }}-${{ env.APP_VER }}.exe"
          if ($exe.FullName -ne $target) {
            Move-Item $exe.FullName $target -Force
          }
          Write-Host "Final EXE: $target"

      - name: Upload artifact (.exe)
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.APP_NAME }}-${{ env.APP_VER }}-win
          path: dist/*.exe
          if-no-files-found: error

      - name: Publish GitHub Release (on tag)
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v2
        with:
          files: dist/*.exe
          generate_release_notes: true
