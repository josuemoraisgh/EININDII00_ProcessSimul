CREATE TABLE "mb_tabela1" (
	"ID"	INTEGER,
	"NAME"	TEXT,
	"*ADDRESS*"	TEXT,	
	"BYTE_SIZE"	INTEGER,
	"TYPE"	TEXT,
	"VALUE"	TEXT,
);

ALTER TABLE nome_da_tabela RENAME COLUMN nome_antigo TO nome_novo;

import sqlite3

# Conecta ou cria o banco
conn = sqlite3.connect("banco.db")
cursor = conn.cursor()

# Cria a tabela com rowName e colName como par √∫nico
cursor.execute("""
CREATE TABLE IF NOT EXISTS dados (
    rowName TEXT NOT NULL,
    colName TEXT NOT NULL,
    valor TEXT,
    PRIMARY KEY (rowName, colName)
)
""")
conn.commit()

# üîπ Inserir valor
def inserir_dado(rowName, colName, valor):
    try:
        cursor.execute("INSERT INTO dados (rowName, colName, valor) VALUES (?, ?, ?)", (rowName, colName, valor))
        conn.commit()
        print("‚úÖ Valor inserido com sucesso.")
    except sqlite3.IntegrityError:
        print("‚ö†Ô∏è Esse par (rowName, colName) j√° existe.")

# üîπ Remover linha pela chave (rowName e colName)
def remover_dado(rowName, colName):
    cursor.execute("DELETE FROM dados WHERE rowName = ? AND colName = ?", (rowName, colName))
    conn.commit()
    if cursor.rowcount:
        print("üóëÔ∏è Linha removida com sucesso.")
    else:
        print("‚ùå Nenhuma linha encontrada com esse par (rowName, colName).")

# üîπ Editar valor pela chave
def editar_dado(rowName, colName, novo_valor):
    cursor.execute("UPDATE dados SET valor = ? WHERE rowName = ? AND colName = ?", (novo_valor, rowName, colName))
    conn.commit()
    if cursor.rowcount:
        print("‚úèÔ∏è Valor atualizado.")
    else:
        print("‚ùå Linha n√£o encontrada para atualizar.")

# üîπ Listar todos os dados
def listar_dados():
    cursor.execute("SELECT * FROM dados")
    for linha in cursor.fetchall():
        print(linha)

# ----------------------------
# Exemplos de uso:

# inserir_dado("ProdutoA", "Pre√ßo", "19.99")
# editar_dado("ProdutoA", "Pre√ßo", "21.50")
# remover_dado("ProdutoA", "Pre√ßo")
# listar_dados()

# Fecha conex√£o ao final
# conn.close()